/*
 * @author Laxman Eluri
 *
 */

package com.laxel.framework.helpers;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Date;

import javax.imageio.ImageIO;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import com.laxel.framework.testreports.ReportManager;

public class Utilities {

	public static void captureScreen(String fileName) {
		try {
			Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
			Rectangle screenRectangle = new Rectangle(screenSize);
			Robot robot = new Robot();
			BufferedImage image = robot.createScreenCapture(screenRectangle);
			File tmpFile = new File(fileName);
			System.out.println(tmpFile.getAbsolutePath());
			ImageIO.write(image, "png", tmpFile);
		} catch (Exception ex) {
			ReportManager.LogFailure("Framework Function", "Capture Screenshot", "",
					"Exception occured while capturing screen shot. Exception message is: " + ex.getMessage(), false);
		}
	}

	public static String getDuration(Date start_Date, Date end_Date) {
		long diff = end_Date.getTime() - start_Date.getTime();
		long diffhrs = diff / (60 * 60 * 1000);
		long diffMinutes = diff / (60 * 1000) % 60;
		long diffSecs = diff / (1000) % 60 % 60;
		return diffhrs + " Hrs " + diffMinutes + " Mins " + diffSecs + " secs.";

	}

	public static void delayFor(long milliSec) {

		try {
			Thread.sleep(milliSec);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static void InvokeProcess(String ProcessName, String args) {

		try {
			ProcessBuilder p = new ProcessBuilder();
			p.command(ProcessName, args);
			p.start();
		} catch (Exception ex) {
			System.out.println(ex.getMessage());
		}
	}

	public static void trasformXMLtoHTML(String xmlFilePath, String xsltFilePath, String outHTMLFilePath) {
		Document document;
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		try {
			DocumentBuilder builder = factory.newDocumentBuilder();
			File stylesheet = new File(xsltFilePath);
			File datafile = new File(xmlFilePath);
			document = builder.parse(datafile);

			// Use a Transformer for output
			TransformerFactory tFactory = TransformerFactory.newInstance();
			StreamSource stylesource = new StreamSource(stylesheet);
			Transformer transformer = tFactory.newTransformer(stylesource);

			DOMSource source = new DOMSource(document);
			StreamResult result = new StreamResult(new File(outHTMLFilePath));
			transformer.transform(source, result);
		} catch (TransformerConfigurationException tce) {
			// Error generated by the parser
			System.out.println("\n** Transformer Factory error");
			System.out.println("   " + tce.getMessage());

			// Use the contained exception, if any
			Throwable x = tce;

			if (tce.getException() != null) {
				x = tce.getException();
			}

			x.printStackTrace();
		} catch (TransformerException te) {
			// Error generated by the parser
			System.out.println("\n** Transformation error");
			System.out.println("   " + te.getMessage());

			// Use the contained exception, if any
			Throwable x = te;

			if (te.getException() != null) {
				x = te.getException();
			}

			x.printStackTrace();
		} catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception x = sxe;

			if (sxe.getException() != null) {
				x = sxe.getException();
			}

			x.printStackTrace();
		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();
		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}
	} // main

}
